# .github/workflows/build-and-release.yml

name: Build and Release Executable

# --- Trigger ---
# This workflow runs on pushes to the release branch, on release events, and on manual dispatch.
on:
  push:
    branches:
      - release
  release:
    types: [published, created]
  workflow_dispatch:

# --- Permissions ---
# Enhanced permissions for semantic release
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  packages: write

jobs:
  # --- Release and Build Job ---
  release-and-build:
    name: Release and Build Executables
    runs-on: ubuntu-latest
    steps:
      # --- 1. Checkout Code ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # --- 2. Setup Node.js ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # --- 3. Install semantic-release dependencies ---
      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release@22 @semantic-release/changelog@6 @semantic-release/git@10 @semantic-release/github@9 conventional-changelog-conventionalcommits@7

      # --- 4. Create semantic-release config ---
      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["release"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ],
            "tagFormat": "v${version}"
          }
          EOF

      # --- 5. Run semantic release ---
      - name: Run semantic release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

      # --- 6. Get latest tag ---
      - name: Get latest tag
        if: success()
        id: get_tag
        run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      # --- 7. Build Windows executable ---
      - name: Set up Python (Windows build)
        if: success()
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build Windows executable
        if: success()
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          pyinstaller \
            --name "PandaBrew" \
            --onefile \
            --windowed \
            --icon "pandabrew.ico" \
            main.py
          cp dist/PandaBrew.exe PandaBrew-windows.exe

      # --- 8. Build Fedora x86_64 executable ---
      - name: Build Fedora (x86_64) executable
        if: success()
        run: |
          docker run --rm -v "${{ github.workspace }}":/app -w /app fedora:latest bash -c " \
            echo 'Installing build dependencies in Fedora container...' && \
            dnf install -y python3-pip python3-devel gcc zip python3-tkinter && \
            echo 'Installing application requirements...' && \
            pip3 install --no-cache-dir -r requirements.txt && \
            echo 'Installing PyInstaller...' && \
            pip3 install --no-cache-dir pyinstaller && \
            echo 'Building executable...' && \
            pyinstaller \
              --name PandaBrew \
              --onefile \
              --windowed \
              --icon pandabrew.ico \
              --hidden-import=PIL._tkinter_finder \
              main.py \
          "
          cp dist/PandaBrew PandaBrew-fedora-x86_64
          chmod +x PandaBrew-fedora-x86_64

      # --- 9. Set up QEMU for ARM emulation ---
      - name: Set up QEMU
        if: success()
        uses: docker/setup-qemu-action@v3

      # --- 10. Build Linux aarch64 executable ---
      - name: Build Linux (aarch64) executable
        if: success()
        run: |
          docker run --rm --platform linux/arm64 -v "${{ github.workspace }}":/app -w /app arm64v8/debian:bullseye bash -c " \
            echo 'Updating package list in Debian aarch64 container...' && \
            apt-get update && \
            echo 'Installing build dependencies...' && \
            apt-get install -y --no-install-recommends python3 python3-pip python3-tk python3-dev gcc zip && \
            echo 'Installing application requirements...' && \
            pip3 install --no-cache-dir -r requirements.txt && \
            echo 'Installing PyInstaller...' && \
            pip3 install --no-cache-dir pyinstaller && \
            echo 'Building executable...' && \
            pyinstaller \
              --name PandaBrew \
              --onefile \
              --windowed \
              --icon pandabrew.ico \
              --hidden-import=PIL._tkinter_finder \
              main.py \
          "
          cp dist/PandaBrew PandaBrew-linux-aarch64
          chmod +x PandaBrew-linux-aarch64

      # --- 11. Upload executables to release ---
      - name: Upload Release Assets
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          files: |
            PandaBrew-windows.exe
            PandaBrew-fedora-x86_64
            PandaBrew-linux-aarch64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
