name: Test, Build, and Release

# --- Trigger ---
# This workflow runs on push to release branch (for semantic release) and on manual dispatch
on:
  push:
    branches:
      - release
  workflow_dispatch:

# --- Permissions ---
# Enhanced permissions for semantic release
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  # --- Semantic Release Job ---
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
      new-release-git-tag: ${{ steps.semantic.outputs.new-release-git-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["release"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": []
                }
              ]
            ]
          }
          EOF

      - name: Run semantic release
        id: semantic
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --- Build Job ---
  build:
    name: Build Executables
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release-published == 'true'
    
    # --- Strategy Matrix ---
    # Define the different operating systems, architectures, and corresponding build targets.
    strategy:
      matrix:
        include:
          - os: windows-latest
            build_target: windows
            asset_name: PandaBrew-windows.exe
            executable_path: dist/PandaBrew.exe
          - os: ubuntu-latest
            build_target: fedora-x86_64
            asset_name: PandaBrew-fedora-x86_64
            executable_path: dist/PandaBrew
          - os: ubuntu-latest
            build_target: linux-aarch64
            asset_name: PandaBrew-linux-aarch64
            executable_path: dist/PandaBrew
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.semantic-release.outputs.new-release-git-tag }}

      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      - name: Set up Python
        if: matrix.build_target == 'windows'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Windows dependencies
        if: matrix.build_target == 'windows'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build Windows executable
        if: matrix.build_target == 'windows'
        run: |
          pyinstaller `
            --name "PandaBrew" `
            --onefile `
            --windowed `
            --icon "pandabrew.ico" `
            main.py

      - name: Build Fedora (x86_64) executable
        if: matrix.build_target == 'fedora-x86_64'
        run: |
          docker run --rm -v "${{ github.workspace }}":/app -w /app fedora:latest bash -c " \
            dnf install -y python3-pip python3-devel gcc zip python3-tkinter && \
            pip3 install --no-cache-dir -r requirements.txt && \
            pip3 install --no-cache-dir pyinstaller && \
            pyinstaller --name PandaBrew --onefile --windowed --icon pandabrew.ico --hidden-import=PIL._tkinter_finder main.py"

      - name: Build Linux (aarch64) executable
        if: matrix.build_target == 'linux-aarch64'
        run: |
          docker run --rm --platform linux/arm64 -v "${{ github.workspace }}":/app -w /app arm64v8/debian:bullseye bash -c " \
            apt-get update && \
            apt-get install -y --no-install-recommends python3 python3-pip python3-tk python3-dev gcc zip && \
            pip3 install --no-cache-dir -r requirements.txt && \
            pip3 install --no-cache-dir pyinstaller && \
            pyinstaller --name PandaBrew --onefile --windowed --icon pandabrew.ico --hidden-import=PIL._tkinter_finder main.py"
      
      # --- 8. Rename Executable for Upload ---
      - name: Rename executable for upload
        run: |
          if [ "${{ matrix.build_target }}" = "windows" ]; then
            # Windows: Copy and rename
            cp "${{ matrix.executable_path }}" "${{ matrix.asset_name }}"
          else
            # Linux: Copy and rename
            cp "${{ matrix.executable_path }}" "${{ matrix.asset_name }}"
            # Make sure it's executable
            chmod +x "${{ matrix.asset_name }}"
          fi
        shell: bash
      
      # --- 9. Upload Assets to Release ---
      # This step uploads the zipped executable as an asset to the existing release.
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.asset_name }}
          tag_name: ${{ needs.semantic-release.outputs.new-release-git-tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}