# .github/workflows/build-and-release.yml

name: Build and Release Executable

# --- Trigger ---
# This workflow runs on pushes to the release branch, on release events, and on manual dispatch.
on:
  push:
    branches:
      - release
  release:
    types: [published, created]
  workflow_dispatch:

# --- Permissions ---
# Enhanced permissions for semantic release
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  packages: write

jobs:
  # --- Semantic Release Job ---
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    # Only run semantic release on push events, not on release events
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      release-tag: ${{ steps.get_tag.outputs.tag }}
      release-created: ${{ steps.get_tag.outputs.created }}
    steps:
      # --- 1. Checkout Code ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # --- 2. Setup Node.js ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # --- 3. Install semantic-release dependencies ---
      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release@22 @semantic-release/changelog@6 @semantic-release/git@10 @semantic-release/github@9 conventional-changelog-conventionalcommits@7

      # --- 4. Create semantic-release config ---
      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["release"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits"
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ],
            "tagFormat": "v${version}"
          }
          EOF

      # --- 5. Run semantic release ---
      - name: Run semantic release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

      # --- 6. Get latest tag ---
      - name: Get latest tag
        id: get_tag
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            TAG=$(git describe --tags --abbrev=0)
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "created=true" >> $GITHUB_OUTPUT
            echo "Created release: $TAG"
          else
            echo "created=false" >> $GITHUB_OUTPUT
            echo "No release created"
          fi

  # --- Build Job ---
  build:
    name: Build Executables
    needs: semantic-release
    # Run if semantic release created a new release OR if triggered by a release event
    if: |
      always() && (
        (needs.semantic-release.outputs.release-created == 'true') ||
        (github.event_name == 'release')
      )

    # --- Strategy Matrix ---
    strategy:
      matrix:
        include:
          - os: windows-latest
            build_target: windows
            asset_name: PandaBrew-windows.exe
            executable_path: dist/PandaBrew.exe
          - os: ubuntu-latest
            build_target: fedora-x86_64
            asset_name: PandaBrew-fedora-x86_64
            executable_path: dist/PandaBrew
          - os: ubuntu-latest
            build_target: linux-aarch64
            asset_name: PandaBrew-linux-aarch64
            executable_path: dist/PandaBrew

    # --- Runner ---
    runs-on: ${{ matrix.os }}

    steps:
      # --- 1. Checkout Code ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Use the tag from semantic release if available, otherwise use the current ref
          ref: ${{ needs.semantic-release.outputs.release-tag || github.event.release.tag_name || github.ref }}

      # --- 2. Set up QEMU for ARM emulation ---
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      # --- 3. Set up Python (for Windows build) ---
      - name: Set up Python
        if: matrix.build_target == 'windows'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --- 4. Install Dependencies (Windows) ---
      - name: Install Windows dependencies
        if: matrix.build_target == 'windows'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      # --- 5. Build Executable (Windows) ---
      - name: Build Windows executable with PyInstaller
        if: matrix.build_target == 'windows'
        run: |
          pyinstaller `
            --name "PandaBrew" `
            --onefile `
            --windowed `
            --icon "pandabrew.ico" `
            main.py

      # --- 6. Build Executable (Fedora x86_64) ---
      - name: Build Fedora (x86_64) executable with PyInstaller
        if: matrix.build_target == 'fedora-x86_64'
        run: |
          docker run --rm -v "${{ github.workspace }}":/app -w /app fedora:latest bash -c " \
            echo 'Installing build dependencies in Fedora container...' && \
            dnf install -y python3-pip python3-devel gcc zip python3-tkinter && \
            echo 'Installing application requirements...' && \
            pip3 install --no-cache-dir -r requirements.txt && \
            echo 'Installing PyInstaller...' && \
            pip3 install --no-cache-dir pyinstaller && \
            echo 'Building executable...' && \
            pyinstaller \
              --name PandaBrew \
              --onefile \
              --windowed \
              --icon pandabrew.ico \
              --hidden-import=PIL._tkinter_finder \
              main.py \
          "

      # --- 7. Build Executable (Linux aarch64) ---
      - name: Build Linux (aarch64) executable with PyInstaller
        if: matrix.build_target == 'linux-aarch64'
        run: |
          docker run --rm --platform linux/arm64 -v "${{ github.workspace }}":/app -w /app arm64v8/debian:bullseye bash -c " \
            echo 'Updating package list in Debian aarch64 container...' && \
            apt-get update && \
            echo 'Installing build dependencies...' && \
            apt-get install -y --no-install-recommends python3 python3-pip python3-tk python3-dev gcc zip && \
            echo 'Installing application requirements...' && \
            pip3 install --no-cache-dir -r requirements.txt && \
            echo 'Installing PyInstaller...' && \
            pip3 install --no-cache-dir pyinstaller && \
            echo 'Building executable...' && \
            pyinstaller \
              --name PandaBrew \
              --onefile \
              --windowed \
              --icon pandabrew.ico \
              --hidden-import=PIL._tkinter_finder \
              main.py \
          "

      # --- 8. Rename Executable for Upload ---
      - name: Rename executable for upload
        run: |
          if [ "${{ matrix.build_target }}" = "windows" ]; then
            # Windows: Copy and rename
            cp "${{ matrix.executable_path }}" "${{ matrix.asset_name }}"
          else
            # Linux: Copy and rename
            cp "${{ matrix.executable_path }}" "${{ matrix.asset_name }}"
            # Make sure it's executable
            chmod +x "${{ matrix.asset_name }}"
          fi
        shell: bash

      # --- 9. Upload Assets to Release ---
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.asset_name }}
          # Use the tag from semantic release if available, otherwise use the release tag
          tag_name: ${{ needs.semantic-release.outputs.release-tag || github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
