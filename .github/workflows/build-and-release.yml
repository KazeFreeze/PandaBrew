# .github/workflows/build-and-release.yml

name: Build and Release Executable

# --- Trigger ---
# This workflow runs when a new tag matching the pattern "v*.*.*" is pushed.
on:
  push:
    tags:
      - "v*.*.*"

# --- Permissions ---
# This block grants the GITHUB_TOKEN the necessary permission to create a release.
permissions:
  contents: write

jobs:
  build:
    # --- Strategy Matrix ---
    # Define the different operating systems, architectures, and corresponding build targets.
    strategy:
      matrix:
        include:
          - os: windows-latest
            build_target: windows
            asset_name: PandaBrew-windows.zip
            executable_path: dist/PandaBrew.exe
          - os: ubuntu-latest
            build_target: fedora-x86_64
            asset_name: PandaBrew-fedora-x86_64.zip
            executable_path: dist/PandaBrew
          - os: ubuntu-latest
            build_target: linux-aarch64
            asset_name: PandaBrew-linux-aarch64.zip
            executable_path: dist/PandaBrew

    # --- Runner ---
    runs-on: ${{ matrix.os }}

    steps:
      # --- 1. Checkout Code ---
      # This step checks out a copy of your repository onto the runner.
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- 2. Set up QEMU for ARM emulation ---
      # This is necessary to build for aarch64 on an x86_64 runner.
      # It will only be used by the aarch64 build job.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # --- 3. Set up Python (for Windows build) ---
      # This step installs a specific version of Python on the host runner.
      # It's primarily for the Windows build which doesn't use Docker.
      - name: Set up Python
        if: matrix.build_target == 'windows'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --- 4. Install Dependencies (Windows) ---
      - name: Install Windows dependencies
        if: matrix.build_target == 'windows'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      # --- 5. Build Executable (Windows) ---
      - name: Build Windows executable with PyInstaller
        if: matrix.build_target == 'windows'
        run: |
          pyinstaller `
            --name "PandaBrew" `
            --onefile `
            --windowed `
            --icon "pandabrew.ico" `
            main.py

      # --- 6. Build Executable (Fedora x86_64) ---
      # We run this on an ubuntu runner but execute the build inside a Fedora Docker container.
      - name: Build Fedora (x86_64) executable with PyInstaller
        if: matrix.build_target == 'fedora-x86_64'
        run: |
          docker run --rm -v "${{ github.workspace }}":/app -w /app fedora:latest bash -c " \
            echo 'Installing build dependencies in Fedora container...' && \
            dnf install -y python3-pip python3-devel gcc zip python3-tkinter && \
            echo 'Installing application requirements...' && \
            pip3 install --no-cache-dir -r requirements.txt && \
            echo 'Installing PyInstaller...' && \
            pip3 install --no-cache-dir pyinstaller && \
            echo 'Building executable...' && \
            pyinstaller \
              --name PandaBrew \
              --onefile \
              --windowed \
              --icon pandabrew.ico \
              --hidden-import=PIL._tkinter_finder \
              main.py \
          "

      # --- 7. Build Executable (Linux aarch64) ---
      # This runs on an ubuntu runner but builds inside a Debian aarch64 container using QEMU.
      - name: Build Linux (aarch64) executable with PyInstaller
        if: matrix.build_target == 'linux-aarch64'
        run: |
          docker run --rm --platform linux/arm64 -v "${{ github.workspace }}":/app -w /app arm64v8/debian:bullseye bash -c " \
            echo 'Updating package list in Debian aarch64 container...' && \
            apt-get update && \
            echo 'Installing build dependencies...' && \
            apt-get install -y python3 python3-pip python3-tk gcc zip && \
            echo 'Installing application requirements...' && \
            pip3 install --no-cache-dir -r requirements.txt && \
            echo 'Installing PyInstaller...' && \
            pip3 install --no-cache-dir pyinstaller && \
            echo 'Building executable...' && \
            pyinstaller \
              --name PandaBrew \
              --onefile \
              --windowed \
              --icon pandabrew.ico \
              --hidden-import=PIL._tkinter_finder \
              main.py \
          "
      
      # --- 8. Package the Executable (Windows) ---
      - name: Package Windows executable
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path ${{ matrix.executable_path }} -DestinationPath ${{ matrix.asset_name }}
        shell: pwsh

      # --- 9. Package the Executable (Linux) ---
      # This step packages the output for both Fedora and aarch64 builds.
      - name: Package Linux executable
        if: matrix.os == 'ubuntu-latest'
        run: zip -j ${{ matrix.asset_name }} ${{ matrix.executable_path }}
      
      # --- 10. Create GitHub Release and Upload Assets ---
      # This step creates the release and uploads the zipped executable as an asset.
      # It runs for each job in the matrix, adding its asset to the same release.
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.asset_name }}
          name: "Release ${{ github.ref_name }}"
          tag_name: ${{ github.ref_name }}
          body: "Official release of PandaBrew, version ${{ github.ref_name }}."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
